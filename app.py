import os, datetime, requests, pytz, base64, io
import streamlit as st
import pandas as pd
import swisseph as swe
from timezonefinder import TimezoneFinder
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont

st.set_page_config(page_title="Kundali – Hindi KP (Mahadasha + Antar/Pratyantar)", layout="wide", page_icon="🪔")

# ---- Assets ----
_BG_B64 = ""

# Hindi names & initials
HN = {'Su':'सूर्य','Mo':'चंद्र','Ma':'मंगल','Me':'बुध','Ju':'गुरु','Ve':'शुक्र','Sa':'शनि','Ra':'राहु','Ke':'केतु'}
HINIT = {'Su':'सू','Mo':'चं','Ma':'मं','Me':'बु','Ju':'गु','Ve':'शु','Sa':'श','Ra':'रा','Ke':'के'}

ORDER = ['Ke','Ve','Su','Mo','Ma','Ra','Ju','Sa','Me']
YEARS = {'Ke':7,'Ve':20,'Su':6,'Mo':10,'Ma':7,'Ra':18,'Ju':16,'Sa':19,'Me':17}
NAK = 360.0/27.0
YEAR_DAYS = 365.2425

# Fonts (for Hindi)
POSSIBLE_FONTS = [
    "/usr/share/fonts/truetype/noto/NotoSansDevanagari-Regular.ttf",
    "/usr/share/fonts/truetype/noto/NotoSerifDevanagari-Regular.ttf",
    "/usr/share/fonts/truetype/lohit-devanagari/Lohit-Devanagari.ttf",
    "/usr/share/fonts/truetype/mangal.ttf",
    "/usr/share/fonts/truetype/freefont/FreeSerif.ttf",
]
def pick_font(size:int):
    for p in POSSIBLE_FONTS:
        if os.path.exists(p):
            try:
                return ImageFont.truetype(p, size=size)
            except Exception:
                pass
    return ImageFont.load_default()

def set_sidereal():
    swe.set_sid_mode(swe.SIDM_LAHIRI, 0, 0)

def parse_latlon(text):
    import re
    if not isinstance(text, str):
        return None
    m = re.match(r'^\s*(-?\d+(?:\.\d+)?)\s*,\s*(-?\d+(?:\.\d+)?)\s*$', text or '')
    if not m: return None
    return float(m.group(1)), float(m.group(2))

def dms(deg):
    d=int(deg); m=int((deg-d)*60); s=int(round((deg-d-m/60)*3600)); return d,m,s

def fmt_deg_sign(lon_sid):
    sign=int(lon_sid//30) + 1
    deg_in_sign = lon_sid % 30.0
    d,m,s=dms(deg_in_sign)
    return sign, f"{d:02d}°{m:02d}'{s:02d}\""

def kp_sublord(lon_sid):
    part = lon_sid % 360.0
    ni = int(part // NAK); pos = part - ni*NAK
    lord = ORDER[ni % 9]
    start = ORDER.index(lord)
    seq = [ORDER[(start+i)%9] for i in range(9)]
    acc = 0.0
    for L in seq:
        seg = NAK * (YEARS[L]/120.0)
        if pos <= acc + seg + 1e-9:
            return lord, L
        acc += seg
    return lord, seq[-1]

def geocode(place, api_key):
    if not api_key:
        raise RuntimeError("Geoapify key missing. Add GEOAPIFY_API_KEY in Secrets.")
    url="https://api.geoapify.com/v1/geocode/search"
    r=requests.get(url, params={"text":place, "format":"json", "limit":1, "apiKey":api_key}, timeout=12)
    j=r.json()
    if r.status_code!=200:
        raise RuntimeError(f"Geoapify {r.status_code}: {j.get('message', str(j)[:150])}")
    if j.get("results"):
        res=j["results"][0]
        return float(res["lat"]), float(res["lon"]), res.get("formatted", place)
    if j.get("features"):
        lon,lat=j["features"][0]["geometry"]["coordinates"]; return float(lat), float(lon), place
    raise RuntimeError("Place not found.")

def tz_from_latlon(lat, lon, dt_local):
    tf = TimezoneFinder()
    tzname = tf.timezone_at(lat=lat, lng=lon) or "Etc/UTC"
    tz = pytz.timezone(tzname)
    dt_local_aware = tz.localize(dt_local)
    dt_utc_naive = dt_local_aware.astimezone(pytz.utc).replace(tzinfo=None)
    offset_hours = tz.utcoffset(dt_local_aware).total_seconds()/3600.0
    return tzname, offset_hours, dt_utc_naive

def sidereal_positions(dt_utc):
    jd = swe.julday(dt_utc.year, dt_utc.month, dt_utc.day, dt_utc.hour + dt_utc.minute/60 + dt_utc.second/3600)
    set_sidereal()
    ay = swe.get_ayanamsa_ut(jd)
    flags=swe.FLG_MOSEPH
    out = {}
    for code, p in [('Su',swe.SUN),('Mo',swe.MOON),('Ma',swe.MARS),('Me',swe.MERCURY),
                    ('Ju',swe.JUPITER),('Ve',swe.VENUS),('Sa',swe.SATURN),('Ra',swe.MEAN_NODE)]:
        xx,_ = swe.calc_ut(jd, p, flags)
        out[code] = (xx[0] - ay) % 360.0
    out['Ke'] = (out['Ra'] + 180.0) % 360.0
    return jd, ay, out

def ascendant_sign(jd_ut, lat, lon):
    set_sidereal()
    cusps, ascmc = swe.houses_ex(jd_ut, lat, lon, b'P', swe.FLG_SIDEREAL)
    asc_lon = ascmc[0] % 360.0
    return int(asc_lon // 30) + 1

def positions_table(sidelons):
    rows=[]
    for code in ['Su','Mo','Ma','Me','Ju','Ve','Sa','Ra','Ke']:
        lon=sidelons[code]
        sign, deg_str = fmt_deg_sign(lon)
        nak_lord, sub_lord = kp_sublord(lon)
        rows.append([HN[code], sign, deg_str, HN[nak_lord], HN[sub_lord]])
    df = pd.DataFrame(rows, columns=["Planet","Sign number","Degree","Nakshatra Lord","Sub Nakshatra Lord"])
    return df

# ---- Vimshottari ----
def moon_balance(moon_sid):
    part = moon_sid % 360.0
    ni = int(part // NAK); pos = part - ni*NAK
    md_lord = ORDER[ni % 9]
    frac = pos/NAK
    remaining_years = YEARS[md_lord]*(1 - frac)
    return md_lord, remaining_years

def add_years(dt, y): return dt + datetime.timedelta(days=y*YEAR_DAYS)

def build_mahadashas_from_birth(birth_local_dt, moon_sid):
    md_lord, rem = moon_balance(moon_sid); end_limit = add_years(birth_local_dt, 100.0)
    segments=[]; start=birth_local_dt; end=min(add_years(start, rem), end_limit)
    segments.append({"planet":md_lord,"start":start,"end":end,"years_used":(end-start).days/YEAR_DAYS})
    idx=(ORDER.index(md_lord)+1)%9; t=end
    while t<end_limit:
        L=ORDER[idx]; e=add_years(t, YEARS[L]); e=min(e, end_limit)
        segments.append({"planet":L,"start":t,"end":e,"years_used":(e-t).days/YEAR_DAYS}); t=e; idx=(idx+1)%9
    return segments

def antars_in_md(md_lord, md_start, md_years):
    res=[]; t=md_start; start_idx=ORDER.index(md_lord)
    for i in range(9):
        L=ORDER[(start_idx+i)%9]; yrs=YEARS[L]*(md_years/120.0); days=yrs*YEAR_DAYS
        s=t; e=t+datetime.timedelta(days=days); res.append((L,s,e,yrs)); t=e
    return res

def pratyantars_in_antar(antar_lord, antar_start, antar_years):
    res=[]; t=antar_start; start_idx=ORDER.index(antar_lord)
    for i in range(9):
        L=ORDER[(start_idx+i)%9]; yrs=YEARS[L]*(antar_years/120.0); days=yrs*YEAR_DAYS
        s=t; e=t+datetime.timedelta(days=days); res.append((L,s,e)); t=e
    return res

def next_ant_praty_in_days(now_local, md_segments, days_window):
    rows=[]; horizon=now_local + datetime.timedelta(days=days_window)
    for seg in md_segments:
        MD=seg["planet"]; ms=seg["start"]; me=seg["end"]; md_years_effective=seg["years_used"]
        for AL,as_,ae,ay in antars_in_md(MD, ms, md_years_effective):
            if ae<now_local or as_>horizon: continue
            for PL,ps,pe in pratyantars_in_antar(AL, as_, ay):
                if pe<now_local or ps>horizon: continue
                rows.append({"major":MD,"antar":AL,"pratyantar":PL,"end":pe})
    rows.sort(key=lambda r:r["end"]); return rows

# ---- Navamsa ----
def navamsa_sign_for_lon(lon):
    sign_index=int(lon//30); deg_in_sign=lon%30.0; pada=int((deg_in_sign*9.0)//30.0)
    sign_group=(sign_index%12)+1
    if sign_group in (1,5,9): base=1
    elif sign_group in (2,6,10): base=10
    elif sign_group in (3,7,11): base=7
    else: base=4
    return ((base-1)+pada)%12+1

def build_navamsa_map(sidelons):
    m={i:[] for i in range(1,13)}
    for code in ['Su','Mo','Ma','Me','Ju','Ve','Sa','Ra','Ke']:
        nav=navamsa_sign_for_lon(sidelons[code]); m[nav].append(HINIT[code])
    return m

# ---- Chart helpers ----
REL_CENTERS = {
    1:(0.50, 0.12),
    2:(0.72, 0.22),
    3:(0.86, 0.38),
    4:(0.74, 0.50),
    5:(0.86, 0.64),
    6:(0.72, 0.80),
    7:(0.50, 0.90),
    8:(0.28, 0.80),
    9:(0.14, 0.64),
    10:(0.26, 0.50),
    11:(0.14, 0.38),
    12:(0.28, 0.22),
}

def houses_from_asc(asc_sign):
    return {h: ((asc_sign + h - 2) % 12) + 1 for h in range(1,13)}

def planets_by_house_from_signs(sidelons, asc_sign):
    m={i:[] for i in range(1,13)}
    for code in ['Su','Mo','Ma','Me','Ju','Ve','Sa','Ra','Ke']:
        sign=int(sidelons[code]//30)+1; house=((sign - asc_sign)%12)+1
        m[house].append(HINIT[code])
    return m

def _draw_text_outline(draw, xy, text, font, fill=(0,0,0), stroke=2):
    x,y=xy
    for dx in (-stroke,0,stroke):
        for dy in (-stroke,0,stroke):
            if dx==0 and dy==0: continue
            draw.text((x+dx,y+dy), text, fill=(255,255,255), font=font)
    draw.text((x,y), text, fill=fill, font=font)

def render_chart_png_bytes(sign_by_house, planets_by_house, size=1200):
    bg = Image.open(io.BytesIO(base64.b64decode(_BG_B64))).convert("RGBA")
    bg = bg.resize((size, int(size*0.75)), Image.LANCZOS)
    canvas = Image.new("RGBA", bg.size, (255,255,255,255))
    canvas.paste(bg, (0,0), bg if bg.mode=="RGBA" else None)

    draw = ImageDraw.Draw(canvas)
    W,H = canvas.size
    font_sign = pick_font(int(min(W,H)*0.085))
    font_planet = pick_font(int(min(W,H)*0.070))

    for h,(rx,ry) in REL_CENTERS.items():
        x = int(rx*W); y = int(ry*H)
        sign = str(sign_by_house[h])
        pls = ", ".join(planets_by_house[h]) if planets_by_house[h] else ""
        sw, sh = draw.textbbox((0,0), sign, font=font_sign)[2:4]
        _draw_text_outline(draw, (x - sw//2, y - sh//2 - 12), sign, font_sign)
        if pls:
            pw, ph = draw.textbbox((0,0), pls, font=font_planet)[2:4]
            _draw_text_outline(draw, (x - pw//2, y + sh//2 - 2), pls, font_planet)

    out = io.BytesIO(); canvas.convert("RGB").save(out, format="PNG"); return out.getvalue()

def main():
    st.title("Kundali — Report (North-Indian Charts)")

    c1,c2 = st.columns([1,1])
    with c1:
        name = st.text_input("Name")
        dob = st.date_input("Date of Birth", min_value=datetime.date(1900,1,1), max_value=datetime.date.today())
        tob = st.time_input("Time of Birth", step=datetime.timedelta(minutes=1))
    with c2:
        place = st.text_input("Place of Birth (City, State, Country)")
        tz_override = st.text_input("UTC offset override (optional, e.g., 5.5)", "")
    api_key = st.secrets.get("GEOAPIFY_API_KEY","")

    if st.button("Generate"):
        try:
            if not place or not place.strip():
                raise RuntimeError("Please enter a Place of Birth (or 'lat,lon').")
            latlon = parse_latlon(place)
            if latlon:
                lat, lon = latlon; disp = f"{lat}, {lon}"
            else:
                lat, lon, disp = geocode(place.strip(), api_key)

            dt_local = datetime.datetime.combine(dob, tob)
            if tz_override.strip():
                tz_hours = float(tz_override); dt_utc = dt_local - datetime.timedelta(hours=tz_hours)
            else:
                _, tz_hours, dt_utc = tz_from_latlon(lat, lon, dt_local)

            jd_ut, _, sidelons = sidereal_positions(dt_utc)
            asc_sign = ascendant_sign(jd_ut, lat, lon)

            # Tables
            df_pos = positions_table(sidelons)
            md_segments = build_mahadashas_from_birth(dt_local, sidelons['Mo'])
            df_md = pd.DataFrame([{"Planet": HN[s["planet"]], "End Date": s["end"].strftime("%d-%m-%Y"),
                                    "Age (at end)": round(((s["end"] - dt_local).days / YEAR_DAYS), 1)} for s in md_segments])
            now_local = datetime.datetime.now()
            rows_ap = next_ant_praty_in_days(now_local, md_segments, days_window=2*365)
            df_ant = pd.DataFrame([{"Major Dasha": HN[r["major"]], "Antar Dasha": HN[r["antar"]],
                                     "Pratyantar Dasha": HN[r["pratyantar"]], "End Date": r["end"].strftime("%d-%m-%Y")} for r in rows_ap])

            # Charts
            sign_by_house_d1 = houses_from_asc(asc_sign)
            planets_by_house_d1 = planets_by_house_from_signs(sidelons, asc_sign)
            d1_bytes = render_chart_png_bytes(sign_by_house_d1, planets_by_house_d1, size=1200)

            asc_lon_dummy = (asc_sign-1)*30.0 + 15.0
            asc_sign_d9 = navamsa_sign_for_lon(asc_lon_dummy)
            nav_map = build_navamsa_map(sidelons)
            sign_by_house_d9 = {h: ((asc_sign_d9 + h - 2) % 12) + 1 for h in range(1,13)}
            planets_by_house_d9 = {i:[] for i in range(1,13)}
            for sign, pls in nav_map.items():
                house = ((sign - asc_sign_d9) % 12) + 1
                planets_by_house_d9[house].extend(pls)
            d9_bytes = render_chart_png_bytes(sign_by_house_d9, planets_by_house_d9, size=1200)

            # App layout: left tables, right charts
            left, right = st.columns([1.2,0.9])
            with left:
                st.subheader("Personal Details")
                st.markdown(f"**Name:** {name or '—'}  \n**Date of Birth:** {dob}  \n**Time of Birth:** {tob}  \n**Place of Birth:** {disp}")
                st.subheader("Planetary Positions")
                st.dataframe(df_pos, use_container_width=True)
                st.subheader("Vimshottari Mahadasha")
                st.dataframe(df_md, use_container_width=True)
                st.subheader("Antar / Pratyantar for next 2 years")
                st.dataframe(df_ant, use_container_width=True)
            with right:
                st.markdown("<div style='text-align:center; font-weight:700;'>Lagna Kundali</div>", unsafe_allow_html=True)
                st.image(d1_bytes, use_container_width=True)
                st.markdown("<div style='text-align:center; font-weight:700; margin-top:6px;'>Navamsa Kundali</div>", unsafe_allow_html=True)
                st.image(d9_bytes, use_container_width=True)

            # DOCX export: two columns with widths and styles
            doc = Document()
            doc.add_heading(f"Kundali — {name}", 0)

            table = doc.add_table(rows=1, cols=2)
            table.autofit = False
            left_cell = table.cell(0,0); right_cell = table.cell(0,1)
            from docx.shared import Inches
            left_w = Inches(4.2); right_w = Inches(3.0)
            table.columns[0].width = left_w; table.columns[1].width = right_w

            # Left cell details
            left_cell.add_paragraph("Personal Details").runs[0].bold = True
            left_cell.add_paragraph(f"Name: {name}")
            left_cell.add_paragraph(f"Date of Birth: {dob}")
            left_cell.add_paragraph(f"Time of Birth: {tob}")
            left_cell.add_paragraph(f"Place of Birth: {disp} (UTC{tz_hours:+.2f})")

            # Planetary table
            left_cell.add_paragraph("Planetary Positions").runs[0].bold = True
            t1 = left_cell.add_table(rows=1, cols=len(df_pos.columns))
            t1.style = "Table Grid"
            for i,c in enumerate(df_pos.columns):
                cell=t1.rows[0].cells[i]; cell.text=c
                for p in cell.paragraphs: p.runs[0].bold=True; p.alignment=1
            for _,row in df_pos.iterrows():
                cells=t1.add_row().cells
                for i,c in enumerate(row): cells[i].text=str(c)

            # Vimshottari
            left_cell.add_paragraph("Vimshottari Mahadasha").runs[0].bold = True
            t2 = left_cell.add_table(rows=1, cols=len(df_md.columns))
            t2.style = "Table Grid"
            for i,c in enumerate(df_md.columns):
                cell=t2.rows[0].cells[i]; cell.text=c
                for p in cell.paragraphs: p.runs[0].bold=True; p.alignment=1
            for _,row in df_md.iterrows():
                cells=t2.add_row().cells
                for i,c in enumerate(row): cells[i].text=str(c)

            # Antar/Pratyantar
            left_cell.add_paragraph("Antar / Pratyantar for next 2 years").runs[0].bold = True
            t3 = left_cell.add_table(rows=1, cols=len(df_ant.columns))
            t3.style = "Table Grid"
            for i,c in enumerate(df_ant.columns):
                cell=t3.rows[0].cells[i]; cell.text=c
                for p in cell.paragraphs: p.runs[0].bold=True; p.alignment=1
            for _,row in df_ant.iterrows():
                cells=t3.add_row().cells
                for i,c in enumerate(row): cells[i].text=str(c)

            # Right charts
            p = right_cell.add_paragraph("Lagna Kundali"); p.alignment = 1
            right_cell.add_paragraph().add_run().add_picture(BytesIO(d1_bytes), width=right_w)
            p = right_cell.add_paragraph("Navamsa Kundali"); p.alignment = 1
            right_cell.add_paragraph().add_run().add_picture(BytesIO(d9_bytes), width=right_w)

            bio = BytesIO(); doc.save(bio)
            st.download_button("⬇️ Download DOCX", bio.getvalue(), file_name=f"{(name or 'Horoscope').strip().replace(' ','_')}_Horoscope.docx")

        except Exception as e:
            st.error(str(e))

if __name__=='__main__':
    main()
